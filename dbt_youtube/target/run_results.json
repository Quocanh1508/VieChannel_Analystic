{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.13", "generated_at": "2025-11-01T06:25:09.518904Z", "invocation_id": "53e0837c-1b72-4a06-9276-1ba43b583056", "invocation_started_at": "2025-11-01T06:25:07.414084Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-11-01T06:25:08.896848Z", "completed_at": "2025-11-01T06:25:08.908446Z"}, {"name": "execute", "started_at": "2025-11-01T06:25:08.943498Z", "completed_at": "2025-11-01T06:25:09.056033Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.17371082305908203, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.dbt_youtube.br_playlist_items", "compiled": true, "compiled_code": "\n\n\nselect\n  \"playlistItem_id\" AS \"PLAYLIST_ITEM_ID\", \n  playlist_id,\n  video_id,\n  video_title as \"VIDEO_TITLE_IN_PLAYLIST\",\n  video_desc as \"VIDEO_DESC_IN_PLAYLIST\",\n  \n  CAST(added_to_playlist_at AS timestamp) as \"ADDED_TO_PLAYLIST_AT\",\n  CAST(video_published_at AS timestamp) as \"VIDEO_PUBLISHED_AT\",\n  CAST(position_in_playlist AS numeric) as \"POSITION_IN_PLAYLIST\",\n  \n  snippet__thumbnails__maxres__url AS \"VIDEO_THUMBNAIL_URL_IN_PLAYLIST\",\n  channel_id\n  \nFROM \"youtube_raw_db\".\"public\".\"raw_playlist_items\"", "relation_name": "\"youtube_raw_db\".\"public\".\"br_playlist_items\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-11-01T06:25:08.888305Z", "completed_at": "2025-11-01T06:25:08.907465Z"}, {"name": "execute", "started_at": "2025-11-01T06:25:08.909950Z", "completed_at": "2025-11-01T06:25:09.071109Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.18889117240905762, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.dbt_youtube.br_channels", "compiled": true, "compiled_code": "\n\nselect\n  channel_id,\n  title,\n  \"customUrl\",\n  \"publishedAt\"::timestamp as \"PUBLISHED_AT\",\n  country,\n  \"subscriberCount\"::bigint as \"SUBSCRIBER_COUNT\", -- S\u1eecA L\u1ed6I \u1ede \u0110\u00c2Y\n  \"viewCount\"::bigint as \"VIEW_COUNT\",         -- S\u1eeda lu\u00f4n \u1edf \u0111\u00e2y\n  \"videoCount\"::bigint as \"VIDEO_COUNT\" ,        -- S\u1eeda lu\u00f4n \u1edf \u0111\u00e2y\n  thumbnail_high AS \"CHANNEL_THUMBNAIL_URL\"\nFROM \"youtube_raw_db\".\"public\".\"raw_channels\"", "relation_name": "\"youtube_raw_db\".\"public\".\"br_channels\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-11-01T06:25:08.900907Z", "completed_at": "2025-11-01T06:25:08.908446Z"}, {"name": "execute", "started_at": "2025-11-01T06:25:08.939953Z", "completed_at": "2025-11-01T06:25:09.091968Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.20966482162475586, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.dbt_youtube.br_playlists", "compiled": true, "compiled_code": "\n\nselect\n    playlist_id,\n    playlist_title,\n    playlist_desc,\n    published_at::timestamp AS \"PUBLISHED_AT\",\n    channel_id,\n    thumb_high AS \"PLAYLIST_THUMBNAIL_URL\",\n    item_count::bigint AS \"ITEM_COUNT\"\nFROM \"youtube_raw_db\".\"public\".\"raw_playlists\"", "relation_name": "\"youtube_raw_db\".\"public\".\"br_playlists\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-11-01T06:25:08.903914Z", "completed_at": "2025-11-01T06:25:08.938967Z"}, {"name": "execute", "started_at": "2025-11-01T06:25:08.946510Z", "completed_at": "2025-11-01T06:25:09.097979Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.21368026733398438, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.dbt_youtube.br_video_stats", "compiled": true, "compiled_code": "\n\n\nwith base as (\n  select\n    video_id\n    , video_title\n    , video_desc\n    \n    -- S\u1eecA L\u1ed6I 1: d\u00f9ng CAST chu\u1ea9n c\u1ee7a SQL/Postgres thay v\u00ec h\u00e0m try_to_timestamp_ntz c\u1ee7a Snowflake\n    , CAST(video_published_at AS timestamp) as \"VIDEO_PUBLISHED_AT\"\n    , duration_iso8601\n\n    -- S\u1eecA L\u1ed6I 2: d\u00f9ng CAST chu\u1ea9n c\u1ee7a SQL/Postgres thay v\u00ec h\u00e0m try_to_number c\u1ee7a Snowflake\n    , CAST(view_count AS numeric) as \"VIEW_COUNT\"\n    , CAST(like_count AS numeric) as \"LIKE_COUNT\"\n    , CAST(comment_count AS numeric) as \"COMMENT_COUNT\"\n\n    , CAST(live_actual_start AS timestamp) as \"LIVE_ACTUAL_START\"\n    , CAST(live_actual_end AS timestamp)   as \"LIVE_ACTUAL_END\"\n    , CAST(live_scheduled_start AS timestamp) as \"LIVE_SCHEDULED_START\"\n  FROM \"youtube_raw_db\".\"public\".\"raw_video_stats\"\n),\n\nparsed as (\n  select\n    *,\n    \n    -- S\u1eecA L\u1ed6I 3: d\u00f9ng h\u00e0m substring(... FROM ...) c\u1ee7a Postgres thay v\u00ec regexp_substr c\u1ee7a Snowflake\n    -- v\u00e0 d\u00f9ng CAST thay v\u00ec to_number\n      coalesce(CAST(substring(duration_iso8601 FROM '(\\d+)H') AS numeric), 0) * 3600\n    + coalesce(CAST(substring(duration_iso8601 FROM '(\\d+)M') AS numeric), 0) * 60\n    + coalesce(CAST(substring(duration_iso8601 FROM '(\\d+)S') AS numeric), 0)\n      as \"DURATION_SECONDS\"\n      \n  from base\n)\n\nselect * from parsed", "relation_name": "\"youtube_raw_db\".\"public\".\"br_video_stats\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-11-01T06:25:09.091968Z", "completed_at": "2025-11-01T06:25:09.097979Z"}, {"name": "execute", "started_at": "2025-11-01T06:25:09.100493Z", "completed_at": "2025-11-01T06:25:09.209915Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.12145638465881348, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.dbt_youtube.stg_channels", "compiled": true, "compiled_code": "\n\n\nselect\n    * \nfrom \"youtube_raw_db\".\"public\".\"br_channels\"", "relation_name": "\"youtube_raw_db\".\"public\".\"stg_channels\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-11-01T06:25:09.116024Z", "completed_at": "2025-11-01T06:25:09.125131Z"}, {"name": "execute", "started_at": "2025-11-01T06:25:09.125131Z", "completed_at": "2025-11-01T06:25:09.268315Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.15939617156982422, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.dbt_youtube.stg_playlists", "compiled": true, "compiled_code": "\n\nselect\n  p.*\n  , c.title as channel_title\nfrom \"youtube_raw_db\".\"public\".\"br_playlists\" p\nleft join \"youtube_raw_db\".\"public\".\"br_channels\" c\n  on p.channel_id = c.channel_id", "relation_name": "\"youtube_raw_db\".\"public\".\"stg_playlists\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-11-01T06:25:09.120050Z", "completed_at": "2025-11-01T06:25:09.184395Z"}, {"name": "execute", "started_at": "2025-11-01T06:25:09.186411Z", "completed_at": "2025-11-01T06:25:09.269820Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.15603232383728027, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.dbt_youtube.stg_videos", "compiled": true, "compiled_code": "\n\nselect\n  -- S\u1eecA L\u1ed6I: C\u00e1c c\u1ed9t n\u00e0y \u0111\u1ebfn t\u1eeb 'br_playlist_items' (ph\u1ea3i d\u00f9ng CH\u1eee HOA)\n  pi.\"PLAYLIST_ITEM_ID\",\n  pi.playlist_id,\n  pi.channel_id,\n  pi.video_id,\n\n  -- S\u1eecA L\u1ed6I: C\u00e1c c\u1ed9t n\u00e0y \u0111\u1ebfn t\u1eeb 'br_video_stats' (ph\u1ea3i d\u00f9ng CH\u1eee HOA ho\u1eb7c ch\u1eef th\u01b0\u1eddng)\n  s.video_title,\n  s.video_desc,\n  s.\"VIDEO_PUBLISHED_AT\" as \"VIDEO_PUBLISHED_AT\",\n  s.\"VIEW_COUNT\" as \"VIEW_COUNT\",\n  s.\"LIKE_COUNT\" as \"LIKE_COUNT\",\n  s.\"COMMENT_COUNT\" as \"COMMENT_COUNT\",\n  s.\"DURATION_SECONDS\" as \"DURATION_SECONDS\",\n  \n  -- H\u00e0m n\u00e0y \u0111\u00e3 s\u1eeda \u0111\u00fang (d\u00f9ng c\u1ed9t CH\u1eee HOA)\n  (current_timestamp::date - s.\"VIDEO_PUBLISHED_AT\"::date) as \"VIDEO_AGE_DAYS\",\n  \n  CASE \n        -- S\u1eecA L\u1ed6I: D\u00f9ng c\u1ed9t CH\u1eee HOA\n        WHEN s.\"LIVE_SCHEDULED_START\" is not null THEN 'Live'\n        WHEN s.\"DURATION_SECONDS\" < 60 THEN 'Shorts'\n        WHEN s.\"DURATION_SECONDS\" is null THEN 'Private videos'\n        ELSE 'Normal videos'\n    END AS \"VIDEO_TYPE\",\n  \n  CASE\n      -- S\u1eecA L\u1ed6I: D\u00f9ng c\u1ed9t CH\u1eee HOA\n      WHEN s.\"DURATION_SECONDS\" <   60 THEN '0-1m'\n      WHEN s.\"DURATION_SECONDS\" <  300 THEN '1-5m'\n      WHEN s.\"DURATION_SECONDS\" <  900 THEN '5-15m'\n      WHEN s.\"DURATION_SECONDS\" < 1800 THEN '15-30m'\n      WHEN s.\"DURATION_SECONDS\" < 3600 THEN '30-60m'\n      ELSE '60m+'\n    END AS \"DURATION_BUCKET\",\n\n  -- S\u1eecA L\u1ed6I: C\u00e1c c\u1ed9t n\u00e0y \u0111\u1ebfn t\u1eeb 'br_playlist_items' (ph\u1ea3i d\u00f9ng CH\u1eee HOA)\n  pi.\"ADDED_TO_PLAYLIST_AT\" AS \"VIDEO_ADDED_TO_PLAYLIST_AT\",\n  pi.\"POSITION_IN_PLAYLIST\" AS \"VIDEO_POSITION_IN_PLAYLIST\",\n  pi.\"VIDEO_THUMBNAIL_URL_IN_PLAYLIST\" AS \"VIDEO_THUMBNAIL_URL\"\n\nfrom \"youtube_raw_db\".\"public\".\"br_playlist_items\" pi\nleft join \"youtube_raw_db\".\"public\".\"br_video_stats\" s\n  -- Join key l\u00e0 ch\u1eef th\u01b0\u1eddng \u1edf c\u1ea3 2 file, n\u00ean gi\u1eef nguy\u00ean\n  on pi.video_id = s.video_id", "relation_name": "\"youtube_raw_db\".\"public\".\"stg_videos\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-11-01T06:25:09.284154Z", "completed_at": "2025-11-01T06:25:09.300856Z"}, {"name": "execute", "started_at": "2025-11-01T06:25:09.301856Z", "completed_at": "2025-11-01T06:25:09.387935Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.12039947509765625, "adapter_response": {}, "message": "Database Error in model g_channel_overview (models\\gold\\g_channel_overview.sql)\n  column \"customurl\" does not exist\n  LINE 18:     , customUrl as \"CHANNEL_CUSTOM_URL\"\n                 ^\n  HINT:  Perhaps you meant to reference the column \"stg_channels.customUrl\".\n  compiled code at target\\run\\dbt_youtube\\models\\gold\\g_channel_overview.sql", "failures": null, "unique_id": "model.dbt_youtube.g_channel_overview", "compiled": true, "compiled_code": "\n\nwith ch as (\n  select\n    channel_id\n    , title as \"CHANNEL_TITLE\"\n    , customUrl as \"CHANNEL_CUSTOM_URL\"\n    , published_at as \"CHANNEL_PUBLISHED_AT\"\n    , country\n    , subscriber_count\n    , view_count AS \"CHANNEL_VIEW_COUNT\"\n    , video_count AS \"CHANNEL_VIDEO_COUNT\"\n    , channel_thumbnail_url \n  from \"youtube_raw_db\".\"public\".\"stg_channels\"\n),\nv as (\n  -- 1 d\u00f2ng/video \u0111\u1ec3 t\u00ednh Avg Length, Avg Rate\n  select\n    video_id\n    ,any_value(duration_seconds) as \"DURATION_SECONDS\"\n    ,any_value(view_count)       as \"VIEW_COUNT\"\n    ,any_value(like_count)       as \"LIKE_COUNT\"\n    ,any_value(comment_count)    as \"COMMENT_COUNT\"\n  from \"youtube_raw_db\".\"public\".\"stg_videos\"\n  group by video_id\n)\nselect\n  ch.*,\n  avg(v.duration_seconds)                             as avg_video_length_sec,\n  avg(v.like_count / nullif(v.view_count, 0))         as avg_like_per_view,\n  avg(v.comment_count / nullif(v.view_count, 0))      as avg_comment_per_view\nfrom ch\nleft join v on 1=1 -- cross join \u0111\u1ec3 l\u1ea5y avg tr\u00ean to\u00e0n b\u1ed9 video\ngroup by\n  ch.channel_id, ch.channel_title, ch.channel_custom_url, ch.channel_published_at, ch.country,\n  ch.subscriber_count, ch.channel_view_count, ch.channel_video_count, ch.channel_thumbnail_url", "relation_name": "\"youtube_raw_db\".\"public\".\"g_channel_overview\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-11-01T06:25:09.293343Z", "completed_at": "2025-11-01T06:25:09.323674Z"}, {"name": "execute", "started_at": "2025-11-01T06:25:09.327669Z", "completed_at": "2025-11-01T06:25:09.387935Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11939406394958496, "adapter_response": {}, "message": "Database Error in model g_duration_distribution (models\\gold\\g_duration_distribution.sql)\n  column \"duration_seconds\" does not exist\n  LINE 17:     , any_value(duration_seconds) as \"DURATION_SECONDS\"\n                           ^\n  compiled code at target\\run\\dbt_youtube\\models\\gold\\g_duration_distribution.sql", "failures": null, "unique_id": "model.dbt_youtube.g_duration_distribution", "compiled": true, "compiled_code": "\n\nwith v as (\n  select\n    video_id\n    , any_value(duration_seconds) as \"DURATION_SECONDS\"\n    , any_value(case\n        when duration_seconds <   60 then '0-1m'\n        when duration_seconds <  300 then '1-5m'\n        when duration_seconds <  900 then '5-15m'\n        when duration_seconds < 1800 then '15-30m'\n        when duration_seconds < 3600 then '30-60m'\n        else '60m+'\n      end) as \"DURATION_BUCKET\"\n  from \"youtube_raw_db\".\"public\".\"stg_videos\"\n  group by video_id\n)\nselect\n  \"DURATION_BUCKET\" as duration_bucket\n  , count(*)        as videos_count\n  , avg(\"DURATION_SECONDS\") as avg_duration_sec\nfrom v\ngroup by 1\norder by\n  case duration_bucket\n    when '0-1m'  then 1\n    when '1-5m'  then 2\n    when '5-15m' then 3\n    when '15-30m' then 4\n    when '30-60m' then 5\n    else 6\n  end", "relation_name": "\"youtube_raw_db\".\"public\".\"g_duration_distribution\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-11-01T06:25:09.296345Z", "completed_at": "2025-11-01T06:25:09.327669Z"}, {"name": "execute", "started_at": "2025-11-01T06:25:09.332179Z", "completed_at": "2025-11-01T06:25:09.392784Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.12039399147033691, "adapter_response": {}, "message": "Database Error in model g_playlist_performance (models\\gold\\g_playlist_performance.sql)\n  function any_value(text) does not exist\n  LINE 25:     , any_value(v.video_title) as \"VIDEO_TITLE\"\n                 ^\n  HINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n  compiled code at target\\run\\dbt_youtube\\models\\gold\\g_playlist_performance.sql", "failures": null, "unique_id": "model.dbt_youtube.g_playlist_performance", "compiled": true, "compiled_code": "\n\nwith pi as (\n  select\n    playlist_id\n    , count(distinct video_id) as items_detected\n  from \"youtube_raw_db\".\"public\".\"stg_videos\"\n  group by playlist_id\n),\nbest as (\n  select\n    v.playlist_id\n    , v.video_id\n    , any_value(v.video_title) as \"VIDEO_TITLE\"\n    , any_value(v.view_count)  as \"VIEW_COUNT\"\n    , row_number() over (partition by v.playlist_id order by any_value(v.view_count) desc) as rn\n  from \"youtube_raw_db\".\"public\".\"stg_videos\" v\n  group by v.playlist_id, v.video_id\n)\nselect\n  p.playlist_id\n  , p.playlist_title               as \"PLAYLIST_TITLE\"\n  , p.\"ITEM_COUNT\"                 as item_count_declared\n  , pi.items_detected\n  , p.channel_id\n  , p.channel_title                as \"CHANNEL_TITLE\"\n  , p.\"PLAYLIST_THUMBNAIL_URL\"     as playlist_thumbnail_url\n  , b.video_id                     as top_video_id\n  , b.\"VIDEO_TITLE\"                as top_video_title\n  , b.\"VIEW_COUNT\"                 as top_video_views\nfrom \"youtube_raw_db\".\"public\".\"stg_playlists\" p\nleft join pi   on pi.playlist_id = p.playlist_id\nleft join best b on b.playlist_id = p.playlist_id and b.rn = 1", "relation_name": "\"youtube_raw_db\".\"public\".\"g_playlist_performance\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-11-01T06:25:09.290160Z", "completed_at": "2025-11-01T06:25:09.314452Z"}, {"name": "execute", "started_at": "2025-11-01T06:25:09.324655Z", "completed_at": "2025-11-01T06:25:09.386912Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.12241244316101074, "adapter_response": {}, "message": "Database Error in model g_content_mix (models\\gold\\g_content_mix.sql)\n  column \"view_count\" does not exist\n  LINE 17:     , any_value(view_count)    as \"VIEW_COUNT\"\n                           ^\n  compiled code at target\\run\\dbt_youtube\\models\\gold\\g_content_mix.sql", "failures": null, "unique_id": "model.dbt_youtube.g_content_mix", "compiled": true, "compiled_code": "\n\nwith v as (\n  select\n    video_id\n    , any_value(view_count)    as \"VIEW_COUNT\"\n    , any_value(like_count)    as \"LIKE_COUNT\"\n    , any_value(comment_count) as \"COMMENT_COUNT\"\n    , any_value(\"VIDEO_TYPE\")  as \"VIDEO_TYPE\"\n  from \"youtube_raw_db\".\"public\".\"stg_videos\"\n  group by video_id\n)\nselect\n  \"VIDEO_TYPE\" as video_type\n  , count(*)   as videos_count\n  , sum(\"VIEW_COUNT\") as total_views\n  , avg(\"LIKE_COUNT\"   / nullif(\"VIEW_COUNT\",0))    as avg_like_per_view\n  , avg(\"COMMENT_COUNT\"/ nullif(\"VIEW_COUNT\",0))    as avg_comment_per_view\nfrom v\ngroup by 1\norder by videos_count desc", "relation_name": "\"youtube_raw_db\".\"public\".\"g_content_mix\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-11-01T06:25:09.422536Z", "completed_at": "2025-11-01T06:25:09.431717Z"}, {"name": "execute", "started_at": "2025-11-01T06:25:09.432696Z", "completed_at": "2025-11-01T06:25:09.473576Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06001400947570801, "adapter_response": {}, "message": "Database Error in model g_video_rankings (models\\gold\\g_video_rankings.sql)\n  function any_value(text) does not exist\n  LINE 17:     , any_value(video_title)        as \"VIDEO_TITLE\"\n                 ^\n  HINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n  compiled code at target\\run\\dbt_youtube\\models\\gold\\g_video_rankings.sql", "failures": null, "unique_id": "model.dbt_youtube.g_video_rankings", "compiled": true, "compiled_code": "\n\nwith v as (\n  select\n    video_id\n    , any_value(video_title)        as \"VIDEO_TITLE\"\n    , any_value(video_desc)         as \"VIDEO_DESC\"\n    , any_value(video_published_at) as \"VIDEO_PUBLISHED_AT\"\n    , any_value(duration_seconds)   as \"DURATION_SECONDS\"\n    , any_value(view_count)         as \"VIEW_COUNT\"\n    , any_value(like_count)         as \"LIKE_COUNT\"\n    , any_value(comment_count)      as \"COMMENT_COUNT\"\n  from \"youtube_raw_db\".\"public\".\"stg_videos\"\n  where video_title is not null\n  group by video_id\n)\nselect\n  v.video_id\n  , v.\"VIDEO_TITLE\"\n  , v.\"VIDEO_DESC\"\n  , v.\"VIDEO_PUBLISHED_AT\"::date as published_date\n  , v.\"DURATION_SECONDS\"\n  , v.\"VIEW_COUNT\"\n  , v.\"LIKE_COUNT\"\n  , v.\"COMMENT_COUNT\"\n  , v.\"LIKE_COUNT\"   / nullif(v.\"VIEW_COUNT\", 0) as like_per_view\n  , v.\"COMMENT_COUNT\"/ nullif(v.\"VIEW_COUNT\", 0) as comment_per_view\n  , row_number() over (order by v.\"VIEW_COUNT\" desc)         as rn_by_views\n  , row_number() over (order by v.\"LIKE_COUNT\"/nullif(v.\"VIEW_COUNT\",0) desc)    as rn_by_like_rate\n  , row_number() over (order by v.\"COMMENT_COUNT\"/nullif(v.\"VIEW_COUNT\",0) desc) as rn_by_comment_rate\n  , row_number() over (order by v.\"VIDEO_PUBLISHED_AT\" desc) as rn_newest\nfrom v", "relation_name": "\"youtube_raw_db\".\"public\".\"g_video_rankings\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-11-01T06:25:09.419021Z", "completed_at": "2025-11-01T06:25:09.428148Z"}, {"name": "execute", "started_at": "2025-11-01T06:25:09.428148Z", "completed_at": "2025-11-01T06:25:09.474575Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0629737377166748, "adapter_response": {}, "message": "Database Error in model g_upload_heatmap (models\\gold\\g_upload_heatmap.sql)\n  column \"video_published_at\" does not exist\n  LINE 17:     , any_value(video_published_at) as \"VIDEO_PUBLISHED_AT\"\n                           ^\n  compiled code at target\\run\\dbt_youtube\\models\\gold\\g_upload_heatmap.sql", "failures": null, "unique_id": "model.dbt_youtube.g_upload_heatmap", "compiled": true, "compiled_code": "\n\nwith v as (\n  select distinct\n    video_id\n    , any_value(video_published_at) as \"VIDEO_PUBLISHED_AT\"\n  from \"youtube_raw_db\".\"public\".\"stg_videos\"\n  where video_published_at is not null\n  group by video_id\n)\nselect\n  extract(dow  from \"VIDEO_PUBLISHED_AT\") as published_dow   -- 0=Sun\n  , extract(hour from \"VIDEO_PUBLISHED_AT\") as published_hour -- 0..23\n  , count(*) as videos_count\nfrom v\ngroup by 1,2", "relation_name": "\"youtube_raw_db\".\"public\".\"g_upload_heatmap\"", "batch_results": null}], "elapsed_time": 0.8200278282165527, "args": {"send_anonymous_usage_stats": true, "validate_macro_args": false, "printer_width": 80, "profiles_dir": "C:\\Users\\QUOC ANH\\.dbt", "static_parser": true, "require_yaml_configuration_for_mf_time_spines": false, "require_generic_test_arguments_property": true, "invocation_command": "dbt run", "vars": {}, "source_freshness_run_project_hooks": true, "use_fast_test_edges": false, "require_all_warnings_handled_by_warn_error": false, "strict_mode": false, "state_modified_compare_more_unrendered_values": false, "write_json": true, "select": [], "version_check": true, "warn_error_options": {"error": [], "warn": [], "silence": []}, "introspect": true, "state_modified_compare_vars": false, "print": true, "indirect_selection": "eager", "show_resource_report": false, "require_explicit_package_overrides_for_builtin_materializations": true, "log_format_file": "debug", "use_colors": true, "project_dir": "C:\\StudyZone\\Project\\mtp-data\\dbt_youtube", "log_path": "C:\\StudyZone\\Project\\mtp-data\\dbt_youtube\\logs", "log_level_file": "debug", "partial_parse_file_diff": true, "require_nested_cumulative_type_params": false, "show_all_deprecations": false, "populate_cache": true, "which": "run", "log_file_max_bytes": 10485760, "upload_to_artifacts_ingest_api": false, "cache_selected_only": false, "exclude": [], "quiet": false, "favor_state": false, "empty": false, "defer": false, "require_resource_names_without_spaces": true, "log_format": "default", "skip_nodes_if_on_run_start_fails": false, "use_colors_file": true, "partial_parse": true, "log_level": "info", "require_batched_execution_for_custom_microbatch_strategy": false, "macro_debugging": false}}