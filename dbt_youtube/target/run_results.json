{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.13", "generated_at": "2025-11-01T06:49:07.472967Z", "invocation_id": "baa02bc0-900c-4f69-86fb-6192b7c75117", "invocation_started_at": "2025-11-01T06:49:05.077543Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-11-01T06:49:06.496960Z", "completed_at": "2025-11-01T06:49:06.513757Z"}, {"name": "execute", "started_at": "2025-11-01T06:49:06.515978Z", "completed_at": "2025-11-01T06:49:06.757038Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.26973581314086914, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.dbt_youtube.br_channels", "compiled": true, "compiled_code": "\n\nselect\n  channel_id,\n  title,\n  \"customUrl\",\n  \"publishedAt\"::timestamp as \"PUBLISHED_AT\",\n  country,\n  \"subscriberCount\"::bigint as \"SUBSCRIBER_COUNT\", -- S\u1eecA L\u1ed6I \u1ede \u0110\u00c2Y\n  \"viewCount\"::bigint as \"VIEW_COUNT\",         -- S\u1eeda lu\u00f4n \u1edf \u0111\u00e2y\n  \"videoCount\"::bigint as \"VIDEO_COUNT\" ,        -- S\u1eeda lu\u00f4n \u1edf \u0111\u00e2y\n  thumbnail_high AS \"CHANNEL_THUMBNAIL_URL\"\nFROM \"youtube_raw_db\".\"public\".\"raw_channels\"", "relation_name": "\"youtube_raw_db\".\"public\".\"br_channels\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-11-01T06:49:06.503768Z", "completed_at": "2025-11-01T06:49:06.514979Z"}, {"name": "execute", "started_at": "2025-11-01T06:49:06.543408Z", "completed_at": "2025-11-01T06:49:06.759186Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.27304553985595703, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.dbt_youtube.br_playlist_items", "compiled": true, "compiled_code": "\n\n\nselect\n  \"playlistItem_id\" AS \"PLAYLIST_ITEM_ID\", \n  playlist_id,\n  video_id,\n  video_title as \"VIDEO_TITLE_IN_PLAYLIST\",\n  video_desc as \"VIDEO_DESC_IN_PLAYLIST\",\n  \n  CAST(added_to_playlist_at AS timestamp) as \"ADDED_TO_PLAYLIST_AT\",\n  CAST(video_published_at AS timestamp) as \"VIDEO_PUBLISHED_AT\",\n  CAST(position_in_playlist AS numeric) as \"POSITION_IN_PLAYLIST\",\n  \n  snippet__thumbnails__maxres__url AS \"VIDEO_THUMBNAIL_URL_IN_PLAYLIST\",\n  channel_id\n  \nFROM \"youtube_raw_db\".\"public\".\"raw_playlist_items\"", "relation_name": "\"youtube_raw_db\".\"public\".\"br_playlist_items\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-11-01T06:49:06.506780Z", "completed_at": "2025-11-01T06:49:06.515978Z"}, {"name": "execute", "started_at": "2025-11-01T06:49:06.547403Z", "completed_at": "2025-11-01T06:49:06.762849Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2740452289581299, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.dbt_youtube.br_playlists", "compiled": true, "compiled_code": "\n\nselect\n    playlist_id,\n    playlist_title,\n    playlist_desc,\n    published_at::timestamp AS \"PUBLISHED_AT\",\n    channel_id,\n    thumb_high AS \"PLAYLIST_THUMBNAIL_URL\",\n    item_count::bigint AS \"ITEM_COUNT\"\nFROM \"youtube_raw_db\".\"public\".\"raw_playlists\"", "relation_name": "\"youtube_raw_db\".\"public\".\"br_playlists\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-11-01T06:49:06.509889Z", "completed_at": "2025-11-01T06:49:06.547403Z"}, {"name": "execute", "started_at": "2025-11-01T06:49:06.551407Z", "completed_at": "2025-11-01T06:49:06.763848Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2743105888366699, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.dbt_youtube.br_video_stats", "compiled": true, "compiled_code": "\n\n\nwith base as (\n  select\n    video_id\n    , video_title\n    , video_desc\n    \n    -- S\u1eecA L\u1ed6I 1: d\u00f9ng CAST chu\u1ea9n c\u1ee7a SQL/Postgres thay v\u00ec h\u00e0m try_to_timestamp_ntz c\u1ee7a Snowflake\n    , CAST(video_published_at AS timestamp) as \"VIDEO_PUBLISHED_AT\"\n    , duration_iso8601\n\n    -- S\u1eecA L\u1ed6I 2: d\u00f9ng CAST chu\u1ea9n c\u1ee7a SQL/Postgres thay v\u00ec h\u00e0m try_to_number c\u1ee7a Snowflake\n    , CAST(view_count AS numeric) as \"VIEW_COUNT\"\n    , CAST(like_count AS numeric) as \"LIKE_COUNT\"\n    , CAST(comment_count AS numeric) as \"COMMENT_COUNT\"\n\n    , CAST(live_actual_start AS timestamp) as \"LIVE_ACTUAL_START\"\n    , CAST(live_actual_end AS timestamp)   as \"LIVE_ACTUAL_END\"\n    , CAST(live_scheduled_start AS timestamp) as \"LIVE_SCHEDULED_START\"\n  FROM \"youtube_raw_db\".\"public\".\"raw_video_stats\"\n),\n\nparsed as (\n  select\n    *,\n    \n    -- S\u1eecA L\u1ed6I 3: d\u00f9ng h\u00e0m substring(... FROM ...) c\u1ee7a Postgres thay v\u00ec regexp_substr c\u1ee7a Snowflake\n    -- v\u00e0 d\u00f9ng CAST thay v\u00ec to_number\n      coalesce(CAST(substring(duration_iso8601 FROM '(\\d+)H') AS numeric), 0) * 3600\n    + coalesce(CAST(substring(duration_iso8601 FROM '(\\d+)M') AS numeric), 0) * 60\n    + coalesce(CAST(substring(duration_iso8601 FROM '(\\d+)S') AS numeric), 0)\n      as \"DURATION_SECONDS\"\n      \n  from base\n)\n\nselect * from parsed", "relation_name": "\"youtube_raw_db\".\"public\".\"br_video_stats\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-11-01T06:49:06.787635Z", "completed_at": "2025-11-01T06:49:06.800229Z"}, {"name": "execute", "started_at": "2025-11-01T06:49:06.801737Z", "completed_at": "2025-11-01T06:49:06.849553Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06951260566711426, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.dbt_youtube.stg_videos", "compiled": true, "compiled_code": "\n\nselect\n  -- S\u1eecA L\u1ed6I: C\u00e1c c\u1ed9t n\u00e0y \u0111\u1ebfn t\u1eeb 'br_playlist_items' (ph\u1ea3i d\u00f9ng CH\u1eee HOA)\n  pi.\"PLAYLIST_ITEM_ID\",\n  pi.playlist_id,\n  pi.channel_id,\n  pi.video_id,\n\n  -- S\u1eecA L\u1ed6I: C\u00e1c c\u1ed9t n\u00e0y \u0111\u1ebfn t\u1eeb 'br_video_stats' (ph\u1ea3i d\u00f9ng CH\u1eee HOA ho\u1eb7c ch\u1eef th\u01b0\u1eddng)\n  s.video_title,\n  s.video_desc,\n  s.\"VIDEO_PUBLISHED_AT\" as \"VIDEO_PUBLISHED_AT\",\n  s.\"VIEW_COUNT\" as \"VIEW_COUNT\",\n  s.\"LIKE_COUNT\" as \"LIKE_COUNT\",\n  s.\"COMMENT_COUNT\" as \"COMMENT_COUNT\",\n  s.\"DURATION_SECONDS\" as \"DURATION_SECONDS\",\n  \n  -- H\u00e0m n\u00e0y \u0111\u00e3 s\u1eeda \u0111\u00fang (d\u00f9ng c\u1ed9t CH\u1eee HOA)\n  (current_timestamp::date - s.\"VIDEO_PUBLISHED_AT\"::date) as \"VIDEO_AGE_DAYS\",\n  \n  CASE \n        -- S\u1eecA L\u1ed6I: D\u00f9ng c\u1ed9t CH\u1eee HOA\n        WHEN s.\"LIVE_SCHEDULED_START\" is not null THEN 'Live'\n        WHEN s.\"DURATION_SECONDS\" < 60 THEN 'Shorts'\n        WHEN s.\"DURATION_SECONDS\" is null THEN 'Private videos'\n        ELSE 'Normal videos'\n    END AS \"VIDEO_TYPE\",\n  \n  CASE\n      -- S\u1eecA L\u1ed6I: D\u00f9ng c\u1ed9t CH\u1eee HOA\n      WHEN s.\"DURATION_SECONDS\" <   60 THEN '0-1m'\n      WHEN s.\"DURATION_SECONDS\" <  300 THEN '1-5m'\n      WHEN s.\"DURATION_SECONDS\" <  900 THEN '5-15m'\n      WHEN s.\"DURATION_SECONDS\" < 1800 THEN '15-30m'\n      WHEN s.\"DURATION_SECONDS\" < 3600 THEN '30-60m'\n      ELSE '60m+'\n    END AS \"DURATION_BUCKET\",\n\n  -- S\u1eecA L\u1ed6I: C\u00e1c c\u1ed9t n\u00e0y \u0111\u1ebfn t\u1eeb 'br_playlist_items' (ph\u1ea3i d\u00f9ng CH\u1eee HOA)\n  pi.\"ADDED_TO_PLAYLIST_AT\" AS \"VIDEO_ADDED_TO_PLAYLIST_AT\",\n  pi.\"POSITION_IN_PLAYLIST\" AS \"VIDEO_POSITION_IN_PLAYLIST\",\n  pi.\"VIDEO_THUMBNAIL_URL_IN_PLAYLIST\" AS \"VIDEO_THUMBNAIL_URL\"\n\nfrom \"youtube_raw_db\".\"public\".\"br_playlist_items\" pi\nleft join \"youtube_raw_db\".\"public\".\"br_video_stats\" s\n  -- Join key l\u00e0 ch\u1eef th\u01b0\u1eddng \u1edf c\u1ea3 2 file, n\u00ean gi\u1eef nguy\u00ean\n  on pi.video_id = s.video_id", "relation_name": "\"youtube_raw_db\".\"public\".\"stg_videos\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-11-01T06:49:06.784634Z", "completed_at": "2025-11-01T06:49:06.793146Z"}, {"name": "execute", "started_at": "2025-11-01T06:49:06.797213Z", "completed_at": "2025-11-01T06:49:06.916634Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.1396024227142334, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.dbt_youtube.stg_playlists", "compiled": true, "compiled_code": "\n\nselect\n  p.*\n  , c.title as channel_title\nfrom \"youtube_raw_db\".\"public\".\"br_playlists\" p\nleft join \"youtube_raw_db\".\"public\".\"br_channels\" c\n  on p.channel_id = c.channel_id", "relation_name": "\"youtube_raw_db\".\"public\".\"stg_playlists\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-11-01T06:49:06.781544Z", "completed_at": "2025-11-01T06:49:06.792816Z"}, {"name": "execute", "started_at": "2025-11-01T06:49:06.793146Z", "completed_at": "2025-11-01T06:49:06.917635Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14242291450500488, "adapter_response": {"_message": "CREATE VIEW", "code": "CREATE VIEW", "rows_affected": -1}, "message": "CREATE VIEW", "failures": null, "unique_id": "model.dbt_youtube.stg_channels", "compiled": true, "compiled_code": "\n\n\nselect\n    * \nfrom \"youtube_raw_db\".\"public\".\"br_channels\"", "relation_name": "\"youtube_raw_db\".\"public\".\"stg_channels\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-11-01T06:49:06.929014Z", "completed_at": "2025-11-01T06:49:06.934811Z"}, {"name": "execute", "started_at": "2025-11-01T06:49:06.934811Z", "completed_at": "2025-11-01T06:49:07.068923Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.14191365242004395, "adapter_response": {"_message": "SELECT 128", "code": "SELECT", "rows_affected": 128}, "message": "SELECT 128", "failures": null, "unique_id": "model.dbt_youtube.g_upload_heatmap", "compiled": true, "compiled_code": "\n\nwith v as (\n  select\n    video_id\n    -- S\u1eecA L\u1ed6I 1 & 2: D\u00f9ng MIN (Postgres) V\u00c0 c\u1ed9t CH\u1eee HOA\n    , MIN(\"VIDEO_PUBLISHED_AT\") as \"VIDEO_PUBLISHED_AT\"\n  from \"youtube_raw_db\".\"public\".\"stg_videos\"\n  -- S\u1eecA L\u1ed6I 2: D\u00f9ng c\u1ed9t CH\u1eee HOA\n  where \"VIDEO_PUBLISHED_AT\" is not null\n  group by video_id\n)\nselect\n  extract(dow  from \"VIDEO_PUBLISHED_AT\") as published_dow   -- 0=Sun\n  , extract(hour from \"VIDEO_PUBLISHED_AT\") as published_hour -- 0..23\n  , count(*) as videos_count\nfrom v\ngroup by 1,2", "relation_name": "\"youtube_raw_db\".\"public\".\"g_upload_heatmap\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-11-01T06:49:06.875859Z", "completed_at": "2025-11-01T06:49:06.902261Z"}, {"name": "execute", "started_at": "2025-11-01T06:49:06.907381Z", "completed_at": "2025-11-01T06:49:07.245332Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.376528263092041, "adapter_response": {"_message": "SELECT 6", "code": "SELECT", "rows_affected": 6}, "message": "SELECT 6", "failures": null, "unique_id": "model.dbt_youtube.g_duration_distribution", "compiled": true, "compiled_code": "\n\nwith v as (\n  select\n    video_id\n    -- S\u1eecA L\u1ed6I: D\u00f9ng MIN v\u00e0 c\u1ed9t CH\u1eee HOA\n    , MIN(\"DURATION_SECONDS\") as \"DURATION_SECONDS\"\n    , MIN(case\n        when \"DURATION_SECONDS\" <   60 then '0-1m'\n        when \"DURATION_SECONDS\" <  300 then '1-5m'\n        when \"DURATION_SECONDS\" <  900 then '5-15m'\n        when \"DURATION_SECONDS\" < 1800 then '15-30m'\n        when \"DURATION_SECONDS\" < 3600 then '30-60m'\n        else '60m+'\n      end) as \"DURATION_BUCKET\"\n  from \"youtube_raw_db\".\"public\".\"stg_videos\"\n  group by video_id\n)\nselect\n  \"DURATION_BUCKET\" as duration_bucket\n  , count(*)        as videos_count\n  , avg(\"DURATION_SECONDS\") as avg_duration_sec\nfrom v\ngroup by 1\norder by\n  -- S\u1eecA L\u1ed6I: D\u00f9ng \u0111\u00fang b\u00ed danh CH\u1eee HOA\n  case \"DURATION_BUCKET\"\n    when '0-1m'   then 1\n    when '1-5m'   then 2\n    when '5-15m'  then 3\n    when '15-30m' then 4\n    when '30-60m' then 5\n    else 6\n  end", "relation_name": "\"youtube_raw_db\".\"public\".\"g_duration_distribution\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-11-01T06:49:06.871807Z", "completed_at": "2025-11-01T06:49:06.878859Z"}, {"name": "execute", "started_at": "2025-11-01T06:49:06.879950Z", "completed_at": "2025-11-01T06:49:07.248330Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3857462406158447, "adapter_response": {"_message": "SELECT 4", "code": "SELECT", "rows_affected": 4}, "message": "SELECT 4", "failures": null, "unique_id": "model.dbt_youtube.g_content_mix", "compiled": true, "compiled_code": "\n\nwith v as (\n  select\n    video_id\n    -- S\u1eecA L\u1ed6I: D\u00f9ng MIN (Postgres) v\u00e0 c\u1ed9t CH\u1eee HOA\n    , MIN(\"VIEW_COUNT\")    as \"VIEW_COUNT\"\n    , MIN(\"LIKE_COUNT\")    as \"LIKE_COUNT\"\n    , MIN(\"COMMENT_COUNT\") as \"COMMENT_COUNT\"\n    , MIN(\"VIDEO_TYPE\")    as \"VIDEO_TYPE\"\n  from \"youtube_raw_db\".\"public\".\"stg_videos\"\n  group by video_id\n)\nselect\n  \"VIDEO_TYPE\" as video_type\n  , count(*)   as videos_count\n  , sum(\"VIEW_COUNT\") as total_views\n  , avg(\"LIKE_COUNT\"   / nullif(\"VIEW_COUNT\",0))     as avg_like_per_view\n  , avg(\"COMMENT_COUNT\"/ nullif(\"VIEW_COUNT\",0))     as avg_comment_per_view\nfrom v\ngroup by 1\norder by videos_count desc", "relation_name": "\"youtube_raw_db\".\"public\".\"g_content_mix\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-11-01T06:49:07.074361Z", "completed_at": "2025-11-01T06:49:07.079395Z"}, {"name": "execute", "started_at": "2025-11-01T06:49:07.079395Z", "completed_at": "2025-11-01T06:49:07.302743Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.23117995262145996, "adapter_response": {"_message": "SELECT 239", "code": "SELECT", "rows_affected": 239}, "message": "SELECT 239", "failures": null, "unique_id": "model.dbt_youtube.g_playlist_performance", "compiled": true, "compiled_code": "\n\nwith pi as (\n  select\n    playlist_id\n    , count(distinct video_id) as items_detected\n  from \"youtube_raw_db\".\"public\".\"stg_videos\"\n  group by playlist_id\n),\nbest as (\n  select\n    v.playlist_id\n    , v.video_id\n    -- S\u1eecA L\u1ed6I: D\u00f9ng MIN (Postgres) thay v\u00ec any_value\n    , MIN(v.video_title) as \"VIDEO_TITLE\"\n    , MIN(v.\"VIEW_COUNT\")  as \"VIEW_COUNT\"\n    , row_number() over (partition by v.playlist_id order by MIN(v.\"VIEW_COUNT\") desc) as rn\n  from \"youtube_raw_db\".\"public\".\"stg_videos\" v\n  group by v.playlist_id, v.video_id\n)\nselect\n  p.playlist_id\n  , p.playlist_title                 as \"PLAYLIST_TITLE\"\n  , p.\"ITEM_COUNT\"                   as item_count_declared\n  , pi.items_detected\n  , p.channel_id\n  , p.channel_title                  as \"CHANNEL_TITLE\"\n  , p.\"PLAYLIST_THUMBNAIL_URL\"     as playlist_thumbnail_url\n  , b.video_id                       as top_video_id\n  , b.\"VIDEO_TITLE\"                  as top_video_title\n  , b.\"VIEW_COUNT\"                   as top_video_views\nfrom \"youtube_raw_db\".\"public\".\"stg_playlists\" p\nleft join pi   on pi.playlist_id = p.playlist_id\nleft join best b on b.playlist_id = p.playlist_id and b.rn = 1", "relation_name": "\"youtube_raw_db\".\"public\".\"g_playlist_performance\"", "batch_results": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2025-11-01T06:49:07.255366Z", "completed_at": "2025-11-01T06:49:07.260105Z"}, {"name": "execute", "started_at": "2025-11-01T06:49:07.260105Z", "completed_at": "2025-11-01T06:49:07.315486Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06696510314941406, "adapter_response": {}, "message": "Database Error in model g_channel_overview (models\\gold\\g_channel_overview.sql)\n  column \"published_at\" does not exist\n  LINE 20:     published_at as \"CHANNEL_PUBLISHED_AT\",\n               ^\n  compiled code at target\\run\\dbt_youtube\\models\\gold\\g_channel_overview.sql", "failures": null, "unique_id": "model.dbt_youtube.g_channel_overview", "compiled": true, "compiled_code": "\n\nwith ch as (\n  select\n    -- S\u1eecA L\u1ed6I: G\u1ecdi c\u00e1c c\u1ed9t ch\u1eef th\u01b0\u1eddng t\u1eeb stg_channels\n    channel_id,\n    title as \"CHANNEL_TITLE\",\n    \"customUrl\" as \"CHANNEL_CUSTOM_URL\",\n    published_at as \"CHANNEL_PUBLISHED_AT\",\n    country,\n    subscriber_count,\n    view_count AS \"CHANNEL_VIEW_COUNT\",\n    video_count AS \"CHANNEL_VIDEO_COUNT\",\n    channel_thumbnail_url \n  from \"youtube_raw_db\".\"public\".\"stg_channels\"\n),\nv as (\n  -- 1 d\u00f2ng/video \u0111\u1ec3 t\u00ednh Avg Length, Avg Rate\n  select\n    video_id\n    -- S\u1eecA L\u1ed6I: D\u00f9ng MIN (Postgres) v\u00e0 c\u1ed9t CH\u1eee HOA (t\u1eeb stg_videos)\n    , MIN(\"DURATION_SECONDS\") as \"DURATION_SECONDS\"\n    , MIN(\"VIEW_COUNT\")       as \"VIEW_COUNT\"\n    , MIN(\"LIKE_COUNT\")       as \"LIKE_COUNT\"\n    , MIN(\"COMMENT_COUNT\")    as \"COMMENT_COUNT\"\n  from \"youtube_raw_db\".\"public\".\"stg_videos\"\n  group by video_id\n)\nselect\n  ch.*,\n  avg(v.\"DURATION_SECONDS\")                           as avg_video_length_sec,\n  avg(v.\"LIKE_COUNT\" / nullif(v.\"VIEW_COUNT\", 0))     as avg_like_per_view,\n  avg(v.\"COMMENT_COUNT\" / nullif(v.\"VIEW_COUNT\", 0))  as avg_comment_per_view\nfrom ch\nleft join v on 1=1 -- cross join \u0111\u1ec3 l\u1ea5y avg tr\u00ean to\u00e0n b\u1ed9 video\ngroup by\n  -- S\u1eecA L\u1ed6I: Group by c\u00e1c c\u1ed9t ch\u1eef th\u01b0\u1eddng t\u1eeb CTE 'ch'\n  ch.channel_id, ch.\"CHANNEL_TITLE\", ch.\"CHANNEL_CUSTOM_URL\", ch.\"CHANNEL_PUBLISHED_AT\", ch.country,\n  ch.subscriber_count, ch.\"CHANNEL_VIEW_COUNT\", ch.\"CHANNEL_VIDEO_COUNT\", ch.channel_thumbnail_url", "relation_name": "\"youtube_raw_db\".\"public\".\"g_channel_overview\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-11-01T06:49:06.931517Z", "completed_at": "2025-11-01T06:49:06.939818Z"}, {"name": "execute", "started_at": "2025-11-01T06:49:06.941081Z", "completed_at": "2025-11-01T06:49:07.447201Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.5212085247039795, "adapter_response": {"_message": "SELECT 11294", "code": "SELECT", "rows_affected": 11294}, "message": "SELECT 11294", "failures": null, "unique_id": "model.dbt_youtube.g_video_rankings", "compiled": true, "compiled_code": "\n\nwith v as (\n  select\n    video_id\n    -- S\u1eecA L\u1ed6I 1: D\u00f9ng MIN (Postgres) thay v\u00ec any_value (Snowflake)\n    -- S\u1eecA L\u1ed6I 2: D\u00f9ng t\u00ean c\u1ed9t CH\u1eee HOA (input t\u1eeb stg_videos)\n    , MIN(video_title)           as \"VIDEO_TITLE\"\n    , MIN(video_desc)            as \"VIDEO_DESC\"\n    , MIN(\"VIDEO_PUBLISHED_AT\")  as \"VIDEO_PUBLISHED_AT\"\n    , MIN(\"DURATION_SECONDS\")    as \"DURATION_SECONDS\"\n    , MIN(\"VIEW_COUNT\")          as \"VIEW_COUNT\"\n    , MIN(\"LIKE_COUNT\")          as \"LIKE_COUNT\"\n    , MIN(\"COMMENT_COUNT\")       as \"COMMENT_COUNT\"\n  from \"youtube_raw_db\".\"public\".\"stg_videos\"\n  where video_title is not null\n  group by video_id\n)\nselect\n  v.video_id\n  , v.\"VIDEO_TITLE\"\n  , v.\"VIDEO_DESC\"\n  , v.\"VIDEO_PUBLISHED_AT\"::date as published_date\n  , v.\"DURATION_SECONDS\"\n  , v.\"VIEW_COUNT\"\n  , v.\"LIKE_COUNT\"\n  , v.\"COMMENT_COUNT\"\n  , v.\"LIKE_COUNT\"   / nullif(v.\"VIEW_COUNT\", 0) as like_per_view\n  , v.\"COMMENT_COUNT\"/ nullif(v.\"VIEW_COUNT\", 0) as comment_per_view\n  , row_number() over (order by v.\"VIEW_COUNT\" desc)                       as rn_by_views\n  , row_number() over (order by v.\"LIKE_COUNT\"/nullif(v.\"VIEW_COUNT\",0) desc)     as rn_by_like_rate\n  , row_number() over (order by v.\"COMMENT_COUNT\"/nullif(v.\"VIEW_COUNT\",0) desc) as rn_by_comment_rate\n  , row_number() over (order by v.\"VIDEO_PUBLISHED_AT\" desc)                as rn_newest\nfrom v", "relation_name": "\"youtube_raw_db\".\"public\".\"g_video_rankings\"", "batch_results": null}], "elapsed_time": 1.1524958610534668, "args": {"require_explicit_package_overrides_for_builtin_materializations": true, "log_format_file": "debug", "invocation_command": "dbt run", "macro_debugging": false, "static_parser": true, "use_colors": true, "use_colors_file": true, "which": "run", "project_dir": "C:\\StudyZone\\Project\\mtp-data\\dbt_youtube", "warn_error_options": {"error": [], "warn": [], "silence": []}, "strict_mode": false, "exclude": [], "partial_parse": true, "require_yaml_configuration_for_mf_time_spines": false, "skip_nodes_if_on_run_start_fails": false, "cache_selected_only": false, "defer": false, "use_fast_test_edges": false, "require_nested_cumulative_type_params": false, "require_resource_names_without_spaces": true, "require_generic_test_arguments_property": true, "printer_width": 80, "log_file_max_bytes": 10485760, "show_all_deprecations": false, "print": true, "select": [], "favor_state": false, "log_level": "info", "state_modified_compare_vars": false, "log_format": "default", "send_anonymous_usage_stats": true, "log_path": "C:\\StudyZone\\Project\\mtp-data\\dbt_youtube\\logs", "show_resource_report": false, "require_all_warnings_handled_by_warn_error": false, "source_freshness_run_project_hooks": true, "empty": false, "upload_to_artifacts_ingest_api": false, "validate_macro_args": false, "require_batched_execution_for_custom_microbatch_strategy": false, "log_level_file": "debug", "vars": {}, "write_json": true, "introspect": true, "indirect_selection": "eager", "partial_parse_file_diff": true, "quiet": false, "state_modified_compare_more_unrendered_values": false, "profiles_dir": "C:\\Users\\QUOC ANH\\.dbt", "populate_cache": true, "version_check": true}}